import{d as i,j as p,c as y,q as o,l as a,p as u,b as _,a as e,o as h,v as n,O as m,m as f,_ as b}from"./index-a2eccc6b.js";const d=r=>(u("data-v-05b73466"),r=r(),_(),r),x={class:"box"},v=d(()=>e("h3",null,"比较常用的数组的方法",-1)),A=d(()=>e("span",{style:{"font-weight":"400"}}," (绿色为自己调用，红色为Array对象调用)",-1)),w={style:{"word-break":"auto-phrase"}},V=["innerHTML"],T=i({__name:"ArrAbout",setup(r){const c=[{property:"with(index,newItem)",desc:"改变数组中对应下标的值。不改变源数组，返回一个新数组"},{property:"toSorted()",desc:"对数组排序，用法同sort()。不改变源数组，返回一个新数组"},{property:"toReversed()",desc:"反转数组用法同revers。不改变源数组，返回一个新数组"},{property:"toSpliced()",desc:"替换数组用法同splice。不改变源数组，返回一个新数组"},{property:"from(object, mapFunc?, thisVal?)",desc:`从具有length属性或可迭代对象的任何对象返回数组。如const myArr = Array.from("abcdef");
    用在字符串上时，效果与str.split("")一致。<br>
    mapFunc: 数组的每项调用的函数，this.Val：执行mapFunc时的this指向`,ArrayType:!0},{property:"copyWithin(target, start?, end?)",desc:`复制数组中的值到数组中的另一个位置，覆盖位置原值，改变原数组。<br>如：let arr = ['a','b','c','d'];
    arr.copyWithin(2,0) // 打印arr = ['a','b','a','b']。<br>
    target：将元素复制到的索引位置；start：开始复制的索引位置，默认为0；
    end：停止的索引位置，默认为数组的length。`},{property:"valueOf()",desc:"返回array的原始值，效果与toString()一致"},{property:"entries()",desc:"返回数组中的可迭代的值的对象"},{property:"valueOf()",desc:"返回array的原始值，效果与toString()类似。"},{property:"toString()",desc:"将数组转换成字符串，并返回结果。"},{property:"flat(deepNumber)",desc:`按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回,默认深度为1。
    如：let arr = [1,3,4,2,5,[6,7,[8,9]]]; let newArr = arr.flat(0); 得到原数组一样的数组；
    let newArr = arr.flat(1); 得到[1, 3, 4, 2, 5, 6, 7, [8, 9]];
    let newArr = arr.flat(2); 得到[1, 3, 4, 2, 5, 6, 7, 8, 9]。`},{property:"flatMap((currentVal, index? ,arr?) => item, deepNumber)",desc:"可以理解为先执行map()后执行flat()。"},{property:"fill(value, start?, end?)",desc:`用静态值填充数组指定位置元素。<br>
    value：填充值；star;开始填充的索引位置，默认为0 ;end：停止填充的索引位置，默认为数组的length 。`},{property:"of(...args)",desc:"创建一个指定内容的数组。如：Array.of(7);得到[7]。Array.of(1,2,3);得到[1,2,3]。",ArrayType:!0},{property:"some((currentVal, index? ,arr?) => boolaen, thisVal)",desc:"检查数组元素中是否有元素符合指定条件, 返回一个Boolean值。"},{property:"every((currentVal, index? ,arr?) => boolaen, thisVal)",desc:"检查数组元素中所有元素是否都符合指定条件, 返回一个Boolean值。"},{property:"filter((currentVal, index? ,arr?) => boolaen, thisVal)",desc:"返回一个符合指定条件的新数组。"},{property:"map((currentVal, index? ,arr?) => item, thisVal)",desc:"返回一个处理后的新数组。"},{property:"forEach((currentVal, index? ,arr?) => void, thisVal)",desc:"数组中每个元素都会执行一次函数。"},{property:"reduce((prevTotal, item, index?, arr?) => newTotal, initTotal)",desc:`数组中的每个元素按序执行提供的 reducer 函数，
    每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值。`},{property:"reduceRight((prevTotal, item, index?, arr?) => newTotal, initTotal)",desc:"与reduce()用法一致，但是是从数组的最后一个元素开始向前执行每个 reducer 函数"},{property:"includes(value)",desc:"判断数组中是否包含指定的值，返回一个Boolean值。"},{property:"reverse()",desc:"将数组中元素的位置颠倒，并返回该数组。该方法会改变原数组。"},{property:"sort((next,prev) => (next - prev) | (prev - next) )",desc:`用原地算法对数组的元素进行排序，并返回排序后的数组，会改变原数组
    next-prev: 升序，prev - next：降序，函数执行的次序为算法的次数。
    默认排序顺序是在将元素转换为字符串，然后比较它们的UTF-16代码单元值序列时构建的。`},{property:"find( (currentVal, index, arr)=> boolean)",desc:"返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined"},{property:"at(index)",desc:"返回数组指定索引的值，如果是负数则从后往前计数索引"},{property:"indexOf(item)",desc:"返回数组指定元素的第一次出现的索引值，如果不存在则返回-1。"},{property:"lastIndexOf(item)",desc:"返回数组指定元素的最后一次出现的索引值，如果不存在则返回-1。"},{property:"findIndex((currentVal, index, arr)=> boolean)",desc:"返回数组中满足指定条件的元素第一次出现的索引值，如果不存在则返回-1。"},{property:"concat(arr)",desc:"将数组与指定数组经行合并(不会去除重复项)，返回一个新数组，不会改变原数组。"},{property:"push()",desc:"在数组的最后一个位置添加元素，返回该元素，该方法会改变原数组。"},{property:"pop()",desc:"删除数组最后一个的元素，返回该元素，该方法会改变原数组。"},{property:"unshift()",desc:"在数组的第一个位置添加元素，返回该元素，该方法会改变原数组。"},{property:"shift()",desc:"删除数组第一个的元素，返回该元素，该方法会改变原数组。"},{property:"join(char)",desc:"将数组的所有元素按指定的字符连接起来，不会改变原数组"},{property:"slice(start?, end?)",desc:`截取数组，返回一个新数组，不会改变原数组。start: 开始截取的位置，默认值为0；
    end：停止截取的位置，默认值为数组的长度`},{property:"splice(startIndex, removeCount, ...newItem)",desc:`从指定索引位置开始替换数组的值，返回被替换的元素组成的数组。该方法会改变原数组。
    removeCount: 从startIndex索引位置开始删除的个数；
    ...newItem：插入startIndex处的新的元素`},{property:"isArray(Object)",desc:"判断传入的值是否是一个数组。",ArryType:!0}];return(g,I)=>{const s=p("el-table-column"),l=p("el-table");return h(),y("div",x,[v,o(l,{data:c,border:""},{default:a(()=>[o(s,{width:"400"},{header:a(()=>[n(" 属性或方法 "),A]),default:a(t=>[e("div",w,[e("span",{class:m(t.row.ArrayType?"array":"arrself")},null,2),n(f(t.row.property),1)])]),_:1}),o(s,{label:"描述"},{default:a(t=>[e("div",{style:{"word-break":"auto-phrase"},innerHTML:t.row.desc},null,8,V)]),_:1})]),_:1})])}}});const B=b(T,[["__scopeId","data-v-05b73466"]]);export{B as default};
